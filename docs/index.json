{
  "api/JCMG.JTween.TransformExtensions.html": {
    "href": "api/JCMG.JTween.TransformExtensions.html",
    "title": "Class TransformExtensions | JTween",
    "keywords": "Class TransformExtensions Inheritance System.Object TransformExtensions Namespace : JCMG.JTween Assembly : JCMG.JTween.dll Syntax public static class TransformExtensions Methods | Improve this Doc View Source Move(Transform, Vector3, Single, EaseType, LoopType, Int32, Action, Action) Moves a transform in world space to position UnityEngine.Vector3 to . Declaration public static void Move(this Transform transform, Vector3 to, float duration, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0, Action onStart = null, Action onComplete = null) Parameters Type Name Description UnityEngine.Transform transform The UnityEngine.Transform that is the target of this tween. UnityEngine.Vector3 to The position the UnityEngine.Transform will be moved to in world space. System.Single duration The length of time in seconds that the tween should take to complete or one pass if looping. EaseType easeType The type of easing the tween should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) System.Action onStart The System.Action that should be invoked when the tween begins playing (default is NULL). System.Action onComplete The System.Action that should be invoked when the tween completes (default is NULL). | Improve this Doc View Source Move(Transform, Vector3, Single, out ITweenHandle, EaseType, LoopType, Int32) Moves a transform in world space to position UnityEngine.Vector3 to . Declaration public static void Move(this Transform transform, Vector3 to, float duration, out ITweenHandle tweenHandle, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0) Parameters Type Name Description UnityEngine.Transform transform The UnityEngine.Transform that is the target of this tween. UnityEngine.Vector3 to The position the UnityEngine.Transform will be moved to in world space. System.Single duration The length of time in seconds that the tween should take to complete or one pass if looping. ITweenHandle tweenHandle The ITweenHandle instance that will be initialized for this tween. EaseType easeType The type of easing the tween should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) | Improve this Doc View Source Move(Transform, Vector3, Vector3, Single, EaseType, LoopType, Int32, Action, Action) Moves a transform in world space from position UnityEngine.Vector3 from to position UnityEngine.Vector3 to . Declaration public static void Move(this Transform transform, Vector3 from, Vector3 to, float duration, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0, Action onStart = null, Action onComplete = null) Parameters Type Name Description UnityEngine.Transform transform The UnityEngine.Transform that is the target of this tween. UnityEngine.Vector3 from The position the UnityEngine.Transform will be moved from in world space. UnityEngine.Vector3 to The position the UnityEngine.Transform will be moved to in world space. System.Single duration The length of time in seconds that the tween should take to complete or one pass if looping. EaseType easeType The type of easing the tween should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) System.Action onStart The System.Action that should be invoked when the tween begins playing (default is NULL). System.Action onComplete The System.Action that should be invoked when the tween completes (default is NULL). | Improve this Doc View Source Move(Transform, Vector3, Vector3, Single, out ITweenHandle, EaseType, LoopType, Int32) Moves a transform in world space from position UnityEngine.Vector3 from to position UnityEngine.Vector3 to . Declaration public static void Move(this Transform transform, Vector3 from, Vector3 to, float duration, out ITweenHandle tweenHandle, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0) Parameters Type Name Description UnityEngine.Transform transform The UnityEngine.Transform that is the target of this tween. UnityEngine.Vector3 from The position the UnityEngine.Transform will be moved from in world space. UnityEngine.Vector3 to The position the UnityEngine.Transform will be moved to in world space. System.Single duration The length of time in seconds that the tween should take to complete or one pass if looping. ITweenHandle tweenHandle The ITweenHandle instance that will be initialized for this tween. EaseType easeType The type of easing the tween should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) | Improve this Doc View Source MoveLocal(Transform, Vector3, Single, EaseType, LoopType, Int32, Action, Action) Moves a transform in local space to position UnityEngine.Vector3 to . Declaration public static void MoveLocal(this Transform transform, Vector3 to, float duration, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0, Action onStart = null, Action onComplete = null) Parameters Type Name Description UnityEngine.Transform transform The UnityEngine.Transform that is the target of this tween. UnityEngine.Vector3 to The position the UnityEngine.Transform will be moved to in local space. System.Single duration The length of time in seconds that the tween should take to complete or one pass if looping. EaseType easeType The type of easing the tween should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) System.Action onStart The System.Action that should be invoked when the tween begins playing (default is NULL). System.Action onComplete The System.Action that should be invoked when the tween completes (default is NULL). | Improve this Doc View Source MoveLocal(Transform, Vector3, Single, out ITweenHandle, EaseType, LoopType, Int32) Moves a transform in local space to position UnityEngine.Vector3 to . Declaration public static void MoveLocal(this Transform transform, Vector3 to, float duration, out ITweenHandle tweenHandle, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0) Parameters Type Name Description UnityEngine.Transform transform The UnityEngine.Transform that is the target of this tween. UnityEngine.Vector3 to The position the UnityEngine.Transform will be moved to in local space. System.Single duration The length of time in seconds that the tween should take to complete or one pass if looping. ITweenHandle tweenHandle The ITweenHandle instance that will be initialized for this tween. EaseType easeType The type of easing the tween should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) | Improve this Doc View Source MoveLocal(Transform, Vector3, Vector3, Single, EaseType, LoopType, Int32, Action, Action) Moves a transform in local space from position UnityEngine.Vector3 from to position UnityEngine.Vector3 to . Declaration public static void MoveLocal(this Transform transform, Vector3 from, Vector3 to, float duration, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0, Action onStart = null, Action onComplete = null) Parameters Type Name Description UnityEngine.Transform transform The UnityEngine.Transform that is the target of this tween. UnityEngine.Vector3 from The position the UnityEngine.Transform will be moved from in local space. UnityEngine.Vector3 to The position the UnityEngine.Transform will be moved to in local space. System.Single duration The length of time in seconds that the tween should take to complete or one pass if looping. EaseType easeType The type of easing the tween should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) System.Action onStart The System.Action that should be invoked when the tween begins playing (default is NULL). System.Action onComplete The System.Action that should be invoked when the tween completes (default is NULL). | Improve this Doc View Source MoveLocal(Transform, Vector3, Vector3, Single, out ITweenHandle, EaseType, LoopType, Int32) Moves a transform in local space from position UnityEngine.Vector3 from to position UnityEngine.Vector3 to . Declaration public static void MoveLocal(this Transform transform, Vector3 from, Vector3 to, float duration, out ITweenHandle tweenHandle, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0) Parameters Type Name Description UnityEngine.Transform transform The UnityEngine.Transform that is the target of this tween. UnityEngine.Vector3 from The position the UnityEngine.Transform will be moved from in local space. UnityEngine.Vector3 to The position the UnityEngine.Transform will be moved to in local space. System.Single duration The length of time in seconds that the tween should take to complete or one pass if looping. ITweenHandle tweenHandle The ITweenHandle instance that will be initialized for this tween. EaseType easeType The type of easing the tween should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) | Improve this Doc View Source Rotate(Transform, Quaternion, Single, EaseType, LoopType, Int32, Action, Action) Rotates in world space this UnityEngine.Transform to rotation UnityEngine.Quaternion to . Declaration public static void Rotate(this Transform transform, Quaternion to, float duration, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0, Action onStart = null, Action onComplete = null) Parameters Type Name Description UnityEngine.Transform transform The UnityEngine.Transform that is the target of this tween. UnityEngine.Quaternion to The rotation the UnityEngine.Transform will be animated to in world space. System.Single duration The length of time in seconds that the tween should take to complete or one pass if looping. EaseType easeType The type of easing the tween should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) System.Action onStart The System.Action that should be invoked when the tween begins playing (default is NULL). System.Action onComplete The System.Action that should be invoked when the tween completes (default is NULL). | Improve this Doc View Source Rotate(Transform, Quaternion, Single, out ITweenHandle, EaseType, LoopType, Int32) Rotates in world space this UnityEngine.Transform to rotation UnityEngine.Quaternion to . Declaration public static void Rotate(this Transform transform, Quaternion to, float duration, out ITweenHandle tweenHandle, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0) Parameters Type Name Description UnityEngine.Transform transform The UnityEngine.Transform that is the target of this tween. UnityEngine.Quaternion to The rotation the UnityEngine.Transform will be animated to in world space. System.Single duration The length of time in seconds that the tween should take to complete or one pass if looping. ITweenHandle tweenHandle The ITweenHandle instance that will be initialized for this tween. EaseType easeType The type of easing the tween should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) | Improve this Doc View Source Rotate(Transform, Quaternion, Quaternion, Single, EaseType, LoopType, Int32, Action, Action) Rotates in world space this UnityEngine.Transform from rotation UnityEngine.Quaternion from to rotation UnityEngine.Quaternion to . Declaration public static void Rotate(this Transform transform, Quaternion from, Quaternion to, float duration, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0, Action onStart = null, Action onComplete = null) Parameters Type Name Description UnityEngine.Transform transform The UnityEngine.Transform that is the target of this tween. UnityEngine.Quaternion from The rotation the UnityEngine.Transform will be animated from in world space. UnityEngine.Quaternion to The rotation the UnityEngine.Transform will be animated to in world space. System.Single duration The length of time in seconds that the tween should take to complete or one pass if looping. EaseType easeType The type of easing the tween should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) System.Action onStart The System.Action that should be invoked when the tween begins playing (default is NULL). System.Action onComplete The System.Action that should be invoked when the tween completes (default is NULL). | Improve this Doc View Source Rotate(Transform, Quaternion, Quaternion, Single, out ITweenHandle, EaseType, LoopType, Int32) Rotates in world space this UnityEngine.Transform from rotation UnityEngine.Quaternion from to rotation UnityEngine.Quaternion to . Declaration public static void Rotate(this Transform transform, Quaternion from, Quaternion to, float duration, out ITweenHandle tweenHandle, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0) Parameters Type Name Description UnityEngine.Transform transform The UnityEngine.Transform that is the target of this tween. UnityEngine.Quaternion from The rotation the UnityEngine.Transform will be animated from in world space. UnityEngine.Quaternion to The rotation the UnityEngine.Transform will be animated to in world space. System.Single duration The length of time in seconds that the tween should take to complete or one pass if looping. ITweenHandle tweenHandle The ITweenHandle instance that will be initialized for this tween. EaseType easeType The type of easing the tween should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) | Improve this Doc View Source RotateLocal(Transform, Quaternion, Single, EaseType, LoopType, Int32, Action, Action) Rotates in local space this UnityEngine.Transform to rotation UnityEngine.Quaternion to . Declaration public static void RotateLocal(this Transform transform, Quaternion to, float duration, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0, Action onStart = null, Action onComplete = null) Parameters Type Name Description UnityEngine.Transform transform The UnityEngine.Transform that is the target of this tween. UnityEngine.Quaternion to The rotation the UnityEngine.Transform will be animated to in local space. System.Single duration The length of time in seconds that the tween should take to complete or one pass if looping. EaseType easeType The type of easing the tween should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) System.Action onStart The System.Action that should be invoked when the tween begins playing (default is NULL). System.Action onComplete The System.Action that should be invoked when the tween completes (default is NULL). | Improve this Doc View Source RotateLocal(Transform, Quaternion, Single, out ITweenHandle, EaseType, LoopType, Int32) Rotates in local space this UnityEngine.Transform to rotation UnityEngine.Quaternion to . Declaration public static void RotateLocal(this Transform transform, Quaternion to, float duration, out ITweenHandle tweenHandle, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0) Parameters Type Name Description UnityEngine.Transform transform The UnityEngine.Transform that is the target of this tween. UnityEngine.Quaternion to The rotation the UnityEngine.Transform will be animated to in local space. System.Single duration The length of time in seconds that the tween should take to complete or one pass if looping. ITweenHandle tweenHandle The ITweenHandle instance that will be initialized for this tween. EaseType easeType The type of easing the tween should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) | Improve this Doc View Source RotateLocal(Transform, Quaternion, Quaternion, Single, EaseType, LoopType, Int32, Action, Action) Rotates in local space this UnityEngine.Transform from rotation UnityEngine.Quaternion from to rotation UnityEngine.Quaternion to . Declaration public static void RotateLocal(this Transform transform, Quaternion from, Quaternion to, float duration, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0, Action onStart = null, Action onComplete = null) Parameters Type Name Description UnityEngine.Transform transform The UnityEngine.Transform that is the target of this tween. UnityEngine.Quaternion from The rotation the UnityEngine.Transform will be animated from in local space. UnityEngine.Quaternion to The rotation the UnityEngine.Transform will be animated to in local space. System.Single duration The length of time in seconds that the tween should take to complete or one pass if looping. EaseType easeType The type of easing the tween should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) System.Action onStart The System.Action that should be invoked when the tween begins playing (default is NULL). System.Action onComplete The System.Action that should be invoked when the tween completes (default is NULL). | Improve this Doc View Source RotateLocal(Transform, Quaternion, Quaternion, Single, out ITweenHandle, EaseType, LoopType, Int32) Rotates in world space this UnityEngine.Transform from rotation UnityEngine.Quaternion from to rotation UnityEngine.Quaternion to . Declaration public static void RotateLocal(this Transform transform, Quaternion from, Quaternion to, float duration, out ITweenHandle tweenHandle, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0) Parameters Type Name Description UnityEngine.Transform transform The UnityEngine.Transform that is the target of this tween. UnityEngine.Quaternion from The rotation the UnityEngine.Transform will be animated from in local space. UnityEngine.Quaternion to The rotation the UnityEngine.Transform will be animated to in local space. System.Single duration The length of time in seconds that the tween should take to complete or one pass if looping. ITweenHandle tweenHandle The ITweenHandle instance that will be initialized for this tween. EaseType easeType The type of easing the tween should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) | Improve this Doc View Source RotateX(Transform, Single, Single, EaseType, LoopType, Int32, Action, Action) Rotates in world space this UnityEngine.Transform around the X axis. Declaration public static void RotateX(this Transform transform, float angle, float duration, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0, Action onStart = null, Action onComplete = null) Parameters Type Name Description UnityEngine.Transform transform The UnityEngine.Transform that is the target of this tween. System.Single angle The angle in degrees that this UnityEngine.Transform will be rotated in around the world X axis. System.Single duration The length of time in seconds that the tween should take to complete or one pass if looping. EaseType easeType The type of easing the tween should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) System.Action onStart The System.Action that should be invoked when the tween begins playing (default is NULL). System.Action onComplete The System.Action that should be invoked when the tween completes (default is NULL). | Improve this Doc View Source RotateX(Transform, Single, Single, out ITweenHandle, EaseType, LoopType, Int32) Rotates in world space this UnityEngine.Transform around the X axis. Declaration public static void RotateX(this Transform transform, float angle, float duration, out ITweenHandle tweenHandle, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0) Parameters Type Name Description UnityEngine.Transform transform The UnityEngine.Transform that is the target of this tween. System.Single angle The angle in degrees that this UnityEngine.Transform will be rotated in around the world X axis. System.Single duration The length of time in seconds that the tween should take to complete or one pass if looping. ITweenHandle tweenHandle The ITweenHandle instance that will be initialized for this tween. EaseType easeType The type of easing the tween should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) | Improve this Doc View Source RotateXLocal(Transform, Single, Single, EaseType, LoopType, Int32, Action, Action) Rotates in local space this UnityEngine.Transform around the X axis. Declaration public static void RotateXLocal(this Transform transform, float angle, float duration, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0, Action onStart = null, Action onComplete = null) Parameters Type Name Description UnityEngine.Transform transform The UnityEngine.Transform that is the target of this tween. System.Single angle The angle in degrees that this UnityEngine.Transform will be rotated in around its local X axis. System.Single duration The length of time in seconds that the tween should take to complete or one pass if looping. EaseType easeType The type of easing the tween should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) System.Action onStart The System.Action that should be invoked when the tween begins playing (default is NULL). System.Action onComplete The System.Action that should be invoked when the tween completes (default is NULL). | Improve this Doc View Source RotateXLocal(Transform, Single, Single, out ITweenHandle, EaseType, LoopType, Int32) Rotates in local space this UnityEngine.Transform around the X axis. Declaration public static void RotateXLocal(this Transform transform, float angle, float duration, out ITweenHandle tweenHandle, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0) Parameters Type Name Description UnityEngine.Transform transform The UnityEngine.Transform that is the target of this tween. System.Single angle The angle in degrees that this UnityEngine.Transform will be rotated in around its local X axis. System.Single duration The length of time in seconds that the tween should take to complete or one pass if looping. ITweenHandle tweenHandle The ITweenHandle instance that will be initialized for this tween. EaseType easeType The type of easing the tween should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) | Improve this Doc View Source RotateY(Transform, Single, Single, EaseType, LoopType, Int32, Action, Action) Rotates in world space this UnityEngine.Transform around the Y axis. Declaration public static void RotateY(this Transform transform, float angle, float duration, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0, Action onStart = null, Action onComplete = null) Parameters Type Name Description UnityEngine.Transform transform The UnityEngine.Transform that is the target of this tween. System.Single angle The angle in degrees that this UnityEngine.Transform will be rotated in around the world Y axis. System.Single duration The length of time in seconds that the tween should take to complete or one pass if looping. EaseType easeType The type of easing the tween should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) System.Action onStart The System.Action that should be invoked when the tween begins playing (default is NULL). System.Action onComplete The System.Action that should be invoked when the tween completes (default is NULL). | Improve this Doc View Source RotateY(Transform, Single, Single, out ITweenHandle, EaseType, LoopType, Int32) Rotates in world space this UnityEngine.Transform around the Y axis. Declaration public static void RotateY(this Transform transform, float angle, float duration, out ITweenHandle tweenHandle, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0) Parameters Type Name Description UnityEngine.Transform transform The UnityEngine.Transform that is the target of this tween. System.Single angle The angle in degrees that this UnityEngine.Transform will be rotated in around the world Y axis. System.Single duration The length of time in seconds that the tween should take to complete or one pass if looping. ITweenHandle tweenHandle The ITweenHandle instance that will be initialized for this tween. EaseType easeType The type of easing the tween should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) | Improve this Doc View Source RotateYLocal(Transform, Single, Single, EaseType, LoopType, Int32, Action, Action) Rotates in local space this UnityEngine.Transform around the Y axis. Declaration public static void RotateYLocal(this Transform transform, float angle, float duration, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0, Action onStart = null, Action onComplete = null) Parameters Type Name Description UnityEngine.Transform transform The UnityEngine.Transform that is the target of this tween. System.Single angle The angle in degrees that this UnityEngine.Transform will be rotated in around its local Y axis. System.Single duration The length of time in seconds that the tween should take to complete or one pass if looping. EaseType easeType The type of easing the tween should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) System.Action onStart The System.Action that should be invoked when the tween begins playing (default is NULL). System.Action onComplete The System.Action that should be invoked when the tween completes (default is NULL). | Improve this Doc View Source RotateYLocal(Transform, Single, Single, out ITweenHandle, EaseType, LoopType, Int32) Rotates in local space this UnityEngine.Transform around the Y axis. Declaration public static void RotateYLocal(this Transform transform, float angle, float duration, out ITweenHandle tweenHandle, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0) Parameters Type Name Description UnityEngine.Transform transform The UnityEngine.Transform that is the target of this tween. System.Single angle The angle in degrees that this UnityEngine.Transform will be rotated in around its local Y axis. System.Single duration The length of time in seconds that the tween should take to complete or one pass if looping. ITweenHandle tweenHandle The ITweenHandle instance that will be initialized for this tween. EaseType easeType The type of easing the tween should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) | Improve this Doc View Source RotateZ(Transform, Single, Single, EaseType, LoopType, Int32, Action, Action) Rotates in world space this UnityEngine.Transform around the Z axis. Declaration public static void RotateZ(this Transform transform, float angle, float duration, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0, Action onStart = null, Action onComplete = null) Parameters Type Name Description UnityEngine.Transform transform The UnityEngine.Transform that is the target of this tween. System.Single angle The angle in degrees that this UnityEngine.Transform will be rotated in around the world Z axis. System.Single duration The length of time in seconds that the tween should take to complete or one pass if looping. EaseType easeType The type of easing the tween should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) System.Action onStart The System.Action that should be invoked when the tween begins playing (default is NULL). System.Action onComplete The System.Action that should be invoked when the tween completes (default is NULL). | Improve this Doc View Source RotateZ(Transform, Single, Single, out ITweenHandle, EaseType, LoopType, Int32) Rotates in world space this UnityEngine.Transform around the Z axis. Declaration public static void RotateZ(this Transform transform, float angle, float duration, out ITweenHandle tweenHandle, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0) Parameters Type Name Description UnityEngine.Transform transform The UnityEngine.Transform that is the target of this tween. System.Single angle The angle in degrees that this UnityEngine.Transform will be rotated in around the world Z axis. System.Single duration The length of time in seconds that the tween should take to complete or one pass if looping. ITweenHandle tweenHandle The ITweenHandle instance that will be initialized for this tween. EaseType easeType The type of easing the tween should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) | Improve this Doc View Source RotateZLocal(Transform, Single, Single, EaseType, LoopType, Int32, Action, Action) Rotates in local space this UnityEngine.Transform around the Z axis. Declaration public static void RotateZLocal(this Transform transform, float angle, float duration, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0, Action onStart = null, Action onComplete = null) Parameters Type Name Description UnityEngine.Transform transform The UnityEngine.Transform that is the target of this tween. System.Single angle The angle in degrees that this UnityEngine.Transform will be rotated in around its local Z axis. System.Single duration The length of time in seconds that the tween should take to complete or one pass if looping. EaseType easeType The type of easing the tween should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) System.Action onStart The System.Action that should be invoked when the tween begins playing (default is NULL). System.Action onComplete The System.Action that should be invoked when the tween completes (default is NULL). | Improve this Doc View Source RotateZLocal(Transform, Single, Single, out ITweenHandle, EaseType, LoopType, Int32) Rotates in local space this UnityEngine.Transform around the Z axis. Declaration public static void RotateZLocal(this Transform transform, float angle, float duration, out ITweenHandle tweenHandle, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0) Parameters Type Name Description UnityEngine.Transform transform The UnityEngine.Transform that is the target of this tween. System.Single angle The angle in degrees that this UnityEngine.Transform will be rotated in around its local Z axis. System.Single duration The length of time in seconds that the tween should take to complete or one pass if looping. ITweenHandle tweenHandle The ITweenHandle instance that will be initialized for this tween. EaseType easeType The type of easing the tween should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) | Improve this Doc View Source Scale(Transform, Vector3, Single, EaseType, LoopType, Int32, Action, Action) Scales this UnityEngine.Transform to scale UnityEngine.Vector3 to . Declaration public static void Scale(this Transform transform, Vector3 to, float duration, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0, Action onStart = null, Action onComplete = null) Parameters Type Name Description UnityEngine.Transform transform The UnityEngine.Transform that is the target of this tween. UnityEngine.Vector3 to The scale the UnityEngine.Transform will be animated to. System.Single duration The length of time in seconds that the tween should take to complete or one pass if looping. EaseType easeType The type of easing the tween should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) System.Action onStart The System.Action that should be invoked when the tween begins playing (default is NULL). System.Action onComplete The System.Action that should be invoked when the tween completes (default is NULL). | Improve this Doc View Source Scale(Transform, Vector3, Single, out ITweenHandle, EaseType, LoopType, Int32) Scales this UnityEngine.Transform to scale UnityEngine.Vector3 to . Declaration public static void Scale(this Transform transform, Vector3 to, float duration, out ITweenHandle tweenHandle, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0) Parameters Type Name Description UnityEngine.Transform transform The UnityEngine.Transform that is the target of this tween. UnityEngine.Vector3 to The scale the UnityEngine.Transform will be animated to. System.Single duration The length of time in seconds that the tween should take to complete or one pass if looping. ITweenHandle tweenHandle The ITweenHandle instance that will be initialized for this tween. EaseType easeType The type of easing the tween should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) | Improve this Doc View Source Scale(Transform, Vector3, Vector3, Single, EaseType, LoopType, Int32, Action, Action) Scales this UnityEngine.Transform from scale UnityEngine.Vector3 from to scale UnityEngine.Vector3 to . Declaration public static void Scale(this Transform transform, Vector3 from, Vector3 to, float duration, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0, Action onStart = null, Action onComplete = null) Parameters Type Name Description UnityEngine.Transform transform The UnityEngine.Transform that is the target of this tween. UnityEngine.Vector3 from The scale the UnityEngine.Transform will be animated from. UnityEngine.Vector3 to The scale the UnityEngine.Transform will be animated to. System.Single duration The length of time in seconds that the tween should take to complete or one pass if looping. EaseType easeType The type of easing the tween should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) System.Action onStart The System.Action that should be invoked when the tween begins playing (default is NULL). System.Action onComplete The System.Action that should be invoked when the tween completes (default is NULL). | Improve this Doc View Source Scale(Transform, Vector3, Vector3, Single, out ITweenHandle, EaseType, LoopType, Int32) Scales this UnityEngine.Transform from scale UnityEngine.Vector3 from to scale UnityEngine.Vector3 to . Declaration public static void Scale(this Transform transform, Vector3 from, Vector3 to, float duration, out ITweenHandle tweenHandle, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0) Parameters Type Name Description UnityEngine.Transform transform The UnityEngine.Transform that is the target of this tween. UnityEngine.Vector3 from The scale the UnityEngine.Transform will be animated from. UnityEngine.Vector3 to The scale the UnityEngine.Transform will be animated to. System.Single duration The length of time in seconds that the tween should take to complete or one pass if looping. ITweenHandle tweenHandle The ITweenHandle instance that will be initialized for this tween. EaseType easeType The type of easing the tween should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero)"
  },
  "api/JCMG.JTween.ITweenSequence.html": {
    "href": "api/JCMG.JTween.ITweenSequence.html",
    "title": "Interface ITweenSequence | JTween",
    "keywords": "Interface ITweenSequence A ITweenHandle collection whose contents are operated in succession. A started event is invoked when first played and completed once the last ITweenHandle instance has completed. Inherited Members ITweenCollection.Add(ITweenHandle) ITweenCollection.Clear() ITweenCollection.Recycle() ITweenCollection.AddOnComplete(Action) ITweenCollection.AddOnStarted(Action) Namespace : JCMG.JTween Assembly : JCMG.JTween.dll Syntax public interface ITweenSequence : ITweenCollection Methods | Improve this Doc View Source AddOnStep(Action) Adds a listener that is invoked every time a ITweenHandle in the sequence has completed. Declaration void AddOnStep(Action onStep) Parameters Type Name Description System.Action onStep | Improve this Doc View Source Pause() Pauses the current ITweenHandle instance in the sequence if playing. Declaration void Pause() | Improve this Doc View Source Play() If not playing, plays the first ITweenHandle instance in the sequence. Otherwise if the current ITweenHandle instance in the sequence is paused that will be played. Declaration void Play() | Improve this Doc View Source Restart() Rewinds all ITweenHandle instances in the sequence and plays the first one. Declaration void Restart() | Improve this Doc View Source Rewind() Rewinds all ITweenHandle instances in the sequence and initialized the first one as paused. Declaration void Rewind() | Improve this Doc View Source Stop() Stops the currently playing ITweenHandle instance in the sequence if any and marks it as complete. Declaration void Stop()"
  },
  "api/JCMG.JTween.SpaceType.html": {
    "href": "api/JCMG.JTween.SpaceType.html",
    "title": "Enum SpaceType | JTween",
    "keywords": "Enum SpaceType The coordinate space system the tween should operate with regards to. Namespace : JCMG.JTween Assembly : JCMG.JTween.dll Syntax [Serializable] public enum SpaceType : byte Fields Name Description Local The coordinate system with regards to the parent object. World The world space coordinate system."
  },
  "api/JCMG.JTween.ITweenCollection.html": {
    "href": "api/JCMG.JTween.ITweenCollection.html",
    "title": "Interface ITweenCollection | JTween",
    "keywords": "Interface ITweenCollection The base interface collection for ITweenHandle s. Namespace : JCMG.JTween Assembly : JCMG.JTween.dll Syntax public interface ITweenCollection Methods | Improve this Doc View Source Add(ITweenHandle) Adds the ITweenHandle instance to the collection. Declaration void Add(ITweenHandle tweenHandle) Parameters Type Name Description ITweenHandle tweenHandle | Improve this Doc View Source AddOnComplete(Action) Adds a listener that is invoked when the collection has completed. Declaration void AddOnComplete(Action onComplete) Parameters Type Name Description System.Action onComplete | Improve this Doc View Source AddOnStarted(Action) Adds a listener that is invoked when the collection has begun playing. Declaration void AddOnStarted(Action onStart) Parameters Type Name Description System.Action onStart | Improve this Doc View Source Clear() Recycles all ITweenHandle instances from the collection and clears all local event listeners. Declaration void Clear() | Improve this Doc View Source Recycle() Recycles all ITweenHandle instances in the collection and removes them. All local event listeners will remain. Declaration void Recycle()"
  },
  "api/JCMG.JTween.ITweenHandle.html": {
    "href": "api/JCMG.JTween.ITweenHandle.html",
    "title": "Interface ITweenHandle | JTween",
    "keywords": "Interface ITweenHandle A user reference to tween data that allows for safe manipulation of its state. Namespace : JCMG.JTween Assembly : JCMG.JTween.dll Syntax public interface ITweenHandle Methods | Improve this Doc View Source AddOnCompletedListener(Action) Adds an event listener that is called when the tween has completed or when Stop() is called while playing/paused. Declaration void AddOnCompletedListener(Action onCompleted) Parameters Type Name Description System.Action onCompleted | Improve this Doc View Source AddOnStartedListener(Action) Adds an event listener that is called when the tween is started via Play() . Declaration void AddOnStartedListener(Action onStarted) Parameters Type Name Description System.Action onStarted | Improve this Doc View Source IsCompleted() Returns true if the tween is completed, otherwise false. Declaration bool IsCompleted() Returns Type Description System.Boolean | Improve this Doc View Source IsPaused() Returns true if the tween is paused, otherwise false. Declaration bool IsPaused() Returns Type Description System.Boolean | Improve this Doc View Source IsPlaying() returns true if the tween is playing, otherwise false. Declaration bool IsPlaying() Returns Type Description System.Boolean | Improve this Doc View Source Pause() Pauses the tween instance if playing. Declaration void Pause() | Improve this Doc View Source Play() Plays the tween instance if paused or not completed. Any listeners added via AddOnStartedListener(Action) will be invoked. Declaration void Play() | Improve this Doc View Source Recycle() Immediately stops the tween and marks the tween as requiring recycling. Any local reference to this ITweenHandle instance should be cleared by setting it to null. If playing or paused, this will not invoke listeners added via AddOnCompletedListener(Action) . Declaration void Recycle() | Improve this Doc View Source Restart() Rewinds the tween data back to its original state and immediately plays it. Declaration void Restart() | Improve this Doc View Source Rewind() Rewinds the tween data back to its original state and sets it as paused. Declaration void Rewind() | Improve this Doc View Source Stop() Stops the tween instance if playing or paused and and marks it as completed. Any listeners added via AddOnCompletedListener(Action) will be invoked. Declaration void Stop()"
  },
  "api/JCMG.JTween.LoopType.html": {
    "href": "api/JCMG.JTween.LoopType.html",
    "title": "Enum LoopType | JTween",
    "keywords": "Enum LoopType The type of looping the tween should use while running. Namespace : JCMG.JTween Assembly : JCMG.JTween.dll Syntax [Serializable] public enum LoopType : byte Fields Name Description None No looping. PingPong The tween should loop from its target state back to its original state. Restart The tween should loop starting back from its original state animating towards its target state."
  },
  "api/JCMG.JTween.Singleton-1.html": {
    "href": "api/JCMG.JTween.Singleton-1.html",
    "title": "Class Singleton<T> | JTween",
    "keywords": "Class Singleton<T> A basic scene Singleton implementation. Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour Singleton<T> JTweenControl Namespace : JCMG.JTween Assembly : JCMG.JTween.dll Syntax public abstract class Singleton<T> : MonoBehaviour where T : Component Type Parameters Name Description T Properties | Improve this Doc View Source Exists Returns true if the instance exists, otherwise false. Declaration public static bool Exists { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Instance Returns the global T instance. Declaration public static T Instance { get; } Property Value Type Description T Methods | Improve this Doc View Source Awake() Declaration protected virtual void Awake() | Improve this Doc View Source OnApplicationQuit() Declaration protected virtual void OnApplicationQuit()"
  },
  "api/JCMG.JTween.RotateMode.html": {
    "href": "api/JCMG.JTween.RotateMode.html",
    "title": "Enum RotateMode | JTween",
    "keywords": "Enum RotateMode The mode a tween should use when animating rotation. Namespace : JCMG.JTween Assembly : JCMG.JTween.dll Syntax [Serializable] public enum RotateMode : byte Fields Name Description X Rotates an object around the X axis. XYZ Rotates an object from one quaternion to another. Y Rotates an object around the Y axis. Z Rotates an object around the Z axis."
  },
  "api/JCMG.JTween.html": {
    "href": "api/JCMG.JTween.html",
    "title": "Namespace JCMG.JTween | JTween",
    "keywords": "Namespace JCMG.JTween Classes ArrayExtensions Extension methods for arrays JTweenControl The global instance for JTween to interact with tweens, tween systems. Singleton<T> A basic scene Singleton implementation. TransformExtensions Interfaces ITweenCollection The base interface collection for ITweenHandle s. ITweenHandle A user reference to tween data that allows for safe manipulation of its state. ITweenSequence A ITweenHandle collection whose contents are operated in succession. A started event is invoked when first played and completed once the last ITweenHandle instance has completed. ITweenSet A ITweenHandle collection whose contents are operated on all at once. A started event is invoked when first played and completed once all ITweenHandle instances have completed. Enums EaseType The type of easing to use for a given tween. LoopType The type of looping the tween should use while running. RotateMode The mode a tween should use when animating rotation. SpaceType The coordinate space system the tween should operate with regards to."
  },
  "api/JCMG.JTween.EaseType.html": {
    "href": "api/JCMG.JTween.EaseType.html",
    "title": "Enum EaseType | JTween",
    "keywords": "Enum EaseType The type of easing to use for a given tween. Namespace : JCMG.JTween Assembly : JCMG.JTween.dll Syntax [Serializable] public enum EaseType : byte Fields Name Description BackIn BackInOut BackOut BounceIn BounceInOut BounceOut CircIn CircInOut CircOut CubicIn CubicInOut CubicOut ElasticIn ElasticInOut ElasticOut ExpoIn ExpoInOut ExpoOut Linear Punch QuadIn QuadInOut QuadOut QuartIn QuartInOut QuartOut QuintIn QuintInOut QuintOut SineIn SineInOut SineOut"
  },
  "api/JCMG.JTween.ITweenSet.html": {
    "href": "api/JCMG.JTween.ITweenSet.html",
    "title": "Interface ITweenSet | JTween",
    "keywords": "Interface ITweenSet A ITweenHandle collection whose contents are operated on all at once. A started event is invoked when first played and completed once all ITweenHandle instances have completed. Inherited Members ITweenCollection.Add(ITweenHandle) ITweenCollection.Clear() ITweenCollection.Recycle() ITweenCollection.AddOnComplete(Action) ITweenCollection.AddOnStarted(Action) Namespace : JCMG.JTween Assembly : JCMG.JTween.dll Syntax public interface ITweenSet : ITweenCollection Methods | Improve this Doc View Source Pause() Pauses all ITweenHandle instances in the ITweenSet . Declaration void Pause() | Improve this Doc View Source Play() Plays all ITweenHandle instances in the ITweenSet . Declaration void Play() | Improve this Doc View Source Restart() Rewinds all ITweenHandle instances in the ITweenSet and plays them. Declaration void Restart() | Improve this Doc View Source Rewind() Rewinds all ITweenHandle instances in the ITweenSet and pauses them. Declaration void Rewind() | Improve this Doc View Source Stop() Stops all ITweenHandle instances in the ITweenSet and marks them as complete. Declaration void Stop()"
  },
  "api/JCMG.JTween.ArrayExtensions.html": {
    "href": "api/JCMG.JTween.ArrayExtensions.html",
    "title": "Class ArrayExtensions | JTween",
    "keywords": "Class ArrayExtensions Extension methods for arrays Inheritance System.Object ArrayExtensions Namespace : JCMG.JTween Assembly : JCMG.JTween.dll Syntax public static class ArrayExtensions Methods | Improve this Doc View Source Populate<T>(T[], T) Assigns the T value to all elements in this array. Declaration public static void Populate<T>(this T[] array, T value) Parameters Type Name Description T[] array T value Type Parameters Name Description T | Improve this Doc View Source PopulatePositionArray(Vector3[], IList<Transform>, SpaceType) Populates the UnityEngine.Vector3 positionArray with the appropriate position from IList transformList based on the passed SpaceType spaceType . The positionArray and transformList must be of equal length. Declaration public static void PopulatePositionArray(this Vector3[] positionArray, IList<Transform> transformList, SpaceType spaceType) Parameters Type Name Description UnityEngine.Vector3 [] positionArray The array of UnityEngine.Vector3 s positions will be assigned to. System.Collections.Generic.IList < UnityEngine.Transform > transformList The IList of UnityEngine.Transform s positions will be assigned from. SpaceType spaceType Whether or not the position assigned should be in world or local space. | Improve this Doc View Source PopulatePositionArray(Vector3[], Transform[], SpaceType) Populates the UnityEngine.Vector3 positionArray with the appropriate position from UnityEngine.Transform transformArray based on the passed SpaceType spaceType . The positionArray and transformArray must be of equal length. Declaration public static void PopulatePositionArray(this Vector3[] positionArray, Transform[] transformArray, SpaceType spaceType) Parameters Type Name Description UnityEngine.Vector3 [] positionArray The array of UnityEngine.Vector3 s positions will be assigned to. UnityEngine.Transform [] transformArray The array of UnityEngine.Transform s positions will be assigned from. SpaceType spaceType Whether or not the position assigned should be in world or local space. | Improve this Doc View Source PopulateRotationArray(Quaternion[], IList<Transform>, SpaceType) Populates the UnityEngine.Quaternion rotationArray with the appropriate rotation from IList transformList based on the passed SpaceType spaceType . The rotationArray and transformList must be of equal length. Declaration public static void PopulateRotationArray(this Quaternion[] rotationArray, IList<Transform> transformList, SpaceType spaceType) Parameters Type Name Description UnityEngine.Quaternion [] rotationArray The array of UnityEngine.Quaternion s rotations will be assigned to. System.Collections.Generic.IList < UnityEngine.Transform > transformList The IList of UnityEngine.Transform s rotations will be assigned from. SpaceType spaceType Whether or not the rotation assigned should be in world or local space. | Improve this Doc View Source PopulateRotationArray(Quaternion[], Transform[], SpaceType) Populates the UnityEngine.Quaternion rotationArray with the appropriate rotation from UnityEngine.Transform transformArray based on the passed SpaceType spaceType . The rotationArray and transformArray must be of equal length. Declaration public static void PopulateRotationArray(this Quaternion[] rotationArray, Transform[] transformArray, SpaceType spaceType) Parameters Type Name Description UnityEngine.Quaternion [] rotationArray The array of UnityEngine.Quaternion s rotations will be assigned to. UnityEngine.Transform [] transformArray The array of UnityEngine.Transform s rotations will be assigned from. SpaceType spaceType Whether or not the rotation assigned should be in world or local space. | Improve this Doc View Source PopulateScaleArray(Vector3[], IList<Transform>) Populates the UnityEngine.Vector3 scaleArray with the scale from IList UnityEngine.Transform transformList . The scaleArray and transformList must be of equal length. Declaration public static void PopulateScaleArray(this Vector3[] scaleArray, IList<Transform> transformList) Parameters Type Name Description UnityEngine.Vector3 [] scaleArray The array of UnityEngine.Vector3 s scale will be assigned to. System.Collections.Generic.IList < UnityEngine.Transform > transformList The IList of UnityEngine.Transform s scale will be assigned from. | Improve this Doc View Source PopulateScaleArray(Vector3[], Transform[]) Populates the UnityEngine.Vector3 scaleArray with the scale from array UnityEngine.Transform transformArray . The scaleArray and transformArray must be of equal length. Declaration public static void PopulateScaleArray(this Vector3[] scaleArray, Transform[] transformArray) Parameters Type Name Description UnityEngine.Vector3 [] scaleArray The array of UnityEngine.Vector3 s scale will be assigned to. UnityEngine.Transform [] transformArray The array of UnityEngine.Transform s scale will be assigned from."
  },
  "api/JCMG.JTween.JTweenControl.html": {
    "href": "api/JCMG.JTween.JTweenControl.html",
    "title": "Class JTweenControl | JTween",
    "keywords": "Class JTweenControl The global instance for JTween to interact with tweens, tween systems. Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour Singleton < JTweenControl > JTweenControl Inherited Members Singleton<JTweenControl>.Instance Singleton<JTweenControl>.Exists Singleton<JTweenControl>.OnApplicationQuit() Namespace : JCMG.JTween Assembly : JCMG.JTween.dll Syntax [AddComponentMenu(\"JCMG/JTween/JTweenControl\")] [RequireComponent(typeof(SingleTransformTweener), typeof(BatchTransformTweener))] public sealed class JTweenControl : Singleton<JTweenControl> Methods | Improve this Doc View Source Awake() Declaration protected override void Awake() Overrides JCMG.JTween.Singleton<JCMG.JTween.JTweenControl>.Awake() | Improve this Doc View Source BatchMove(Transform[], Vector3[], Vector3[], Single, out ITweenHandle, SpaceType, EaseType, LoopType, Int32) Creates a batch of movement tweens for the UnityEngine.Transform [] targets . Declaration public void BatchMove(Transform[] targets, Vector3[] fromArray, Vector3[] toArray, float duration, out ITweenHandle tweenHandle, SpaceType spaceType = SpaceType.World, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0) Parameters Type Name Description UnityEngine.Transform [] targets The UnityEngine.Transform [] that are the targets of this tween batch. UnityEngine.Vector3 [] fromArray The UnityEngine.Vector3 [] where the move from position should be assigned from. UnityEngine.Vector3 [] toArray The UnityEngine.Vector3 [] where the move to position should be assigned from. System.Single duration The length of time in seconds that the tween batch should take to complete or one pass if looping. ITweenHandle tweenHandle The ITweenHandle instance that will be initialized for this tween. SpaceType spaceType The coordinate system the tween batch should operate in (default is World). EaseType easeType The type of easing the tween batch should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) | Improve this Doc View Source BatchMove(Transform[], Vector3[], Vector3[], Single, SpaceType, EaseType, LoopType, Int32, Action, Action) Creates a batch of movement tweens for the UnityEngine.Transform [] targets . Declaration public void BatchMove(Transform[] targets, Vector3[] fromArray, Vector3[] toArray, float duration, SpaceType spaceType = SpaceType.World, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0, Action onStart = null, Action onComplete = null) Parameters Type Name Description UnityEngine.Transform [] targets The UnityEngine.Transform [] that are the targets of this tween batch. UnityEngine.Vector3 [] fromArray The UnityEngine.Vector3 [] where the move from position should be assigned from. UnityEngine.Vector3 [] toArray The UnityEngine.Vector3 [] where the move to position should be assigned from. System.Single duration The length of time in seconds that the tween batch should take to complete or one pass if looping. SpaceType spaceType The coordinate system the tween batch should operate in (default is World). EaseType easeType The type of easing the tween batch should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) System.Action onStart The System.Action that should be invoked when the tween batch begins playing (default is NULL). System.Action onComplete The System.Action that should be invoked when the tween batch completes (default is NULL). | Improve this Doc View Source BatchMoveSlice(Transform[], Vector3[], Vector3[], Int32, Int32, Single, out ITweenHandle, SpaceType, EaseType, LoopType, Int32) Creates a batch of movement tweens for a slice from UnityEngine.Transform [] targets starting at startIndex to length . Declaration public void BatchMoveSlice(Transform[] targets, Vector3[] fromArray, Vector3[] toArray, int startIndex, int length, float duration, out ITweenHandle tweenHandle, SpaceType spaceType = SpaceType.World, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0) Parameters Type Name Description UnityEngine.Transform [] targets The UnityEngine.Transform [] that are the targets of this tween batch. UnityEngine.Vector3 [] fromArray The UnityEngine.Vector3 [] where the move from position should be assigned from. UnityEngine.Vector3 [] toArray The UnityEngine.Vector3 [] where the move to position should be assigned from. System.Int32 startIndex The index where the slice should start from in the parameter arrays. System.Int32 length The length from which values should copied in the parameter arrays starting from the startIndex . System.Single duration The length of time in seconds that the tween batch should take to complete or one pass if looping. ITweenHandle tweenHandle The ITweenHandle instance that will be initialized for this tween. SpaceType spaceType The coordinate system the tween batch should operate in (default is World). EaseType easeType The type of easing the tween batch should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) | Improve this Doc View Source BatchMoveSlice(Transform[], Vector3[], Vector3[], Int32, Int32, Single, SpaceType, EaseType, LoopType, Int32, Action, Action) Creates a batch of movement tweens for a slice from UnityEngine.Transform [] targets starting at startIndex to length . Declaration public void BatchMoveSlice(Transform[] targets, Vector3[] fromArray, Vector3[] toArray, int startIndex, int length, float duration, SpaceType spaceType = SpaceType.World, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0, Action onStart = null, Action onComplete = null) Parameters Type Name Description UnityEngine.Transform [] targets The UnityEngine.Transform [] that are the targets of this tween batch. UnityEngine.Vector3 [] fromArray The UnityEngine.Vector3 [] where the move from position should be assigned from. UnityEngine.Vector3 [] toArray The UnityEngine.Vector3 [] where the move to position should be assigned from. System.Int32 startIndex The index where the slice should start from in the parameter arrays. System.Int32 length The length from which values should copied in the parameter arrays starting from the startIndex . System.Single duration The length of time in seconds that the tween batch should take to complete or one pass if looping. SpaceType spaceType The coordinate system the tween batch should operate in (default is World). EaseType easeType The type of easing the tween batch should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) System.Action onStart The System.Action that should be invoked when the tween batch begins playing (default is NULL). System.Action onComplete The System.Action that should be invoked when the tween batch completes (default is NULL). | Improve this Doc View Source BatchRotate(Transform[], Quaternion[], Quaternion[], Single, out ITweenHandle, SpaceType, EaseType, LoopType, Int32) Creates a batch of rotation tweens for the UnityEngine.Transform [] targets . Declaration public void BatchRotate(Transform[] targets, Quaternion[] fromArray, Quaternion[] toArray, float duration, out ITweenHandle tweenHandle, SpaceType spaceType = SpaceType.World, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0) Parameters Type Name Description UnityEngine.Transform [] targets The UnityEngine.Transform [] that are the targets of this tween batch. UnityEngine.Quaternion [] fromArray The UnityEngine.Quaternion [] where the from rotation should be assigned from. UnityEngine.Quaternion [] toArray The UnityEngine.Quaternion [] where the to rotation should be assigned from. System.Single duration The length of time in seconds that the tween batch should take to complete or one pass if looping. ITweenHandle tweenHandle The ITweenHandle instance that will be initialized for this tween. SpaceType spaceType The coordinate system the tween batch should operate in (default is World). EaseType easeType The type of easing the tween batch should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) | Improve this Doc View Source BatchRotate(Transform[], Quaternion[], Quaternion[], Single, SpaceType, EaseType, LoopType, Int32, Action, Action) Creates a batch of rotation tweens for the UnityEngine.Transform [] targets . Declaration public void BatchRotate(Transform[] targets, Quaternion[] fromArray, Quaternion[] toArray, float duration, SpaceType spaceType = SpaceType.World, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0, Action onStart = null, Action onComplete = null) Parameters Type Name Description UnityEngine.Transform [] targets The UnityEngine.Transform [] that are the targets of this tween batch. UnityEngine.Quaternion [] fromArray The UnityEngine.Quaternion [] where the from rotation should be assigned from. UnityEngine.Quaternion [] toArray The UnityEngine.Quaternion [] where the to rotation should be assigned from. System.Single duration The length of time in seconds that the tween batch should take to complete or one pass if looping. SpaceType spaceType The coordinate system the tween batch should operate in (default is World). EaseType easeType The type of easing the tween batch should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) System.Action onStart The System.Action that should be invoked when the tween batch begins playing (default is NULL). System.Action onComplete The System.Action that should be invoked when the tween batch completes (default is NULL). | Improve this Doc View Source BatchRotateSlice(Transform[], Quaternion[], Quaternion[], Int32, Int32, Single, out ITweenHandle, SpaceType, EaseType, LoopType, Int32) Creates a batch of rotation tweens for a slice from UnityEngine.Transform [] targets starting at startIndex to length . Declaration public void BatchRotateSlice(Transform[] targets, Quaternion[] fromArray, Quaternion[] toArray, int startIndex, int length, float duration, out ITweenHandle tweenHandle, SpaceType spaceType = SpaceType.World, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0) Parameters Type Name Description UnityEngine.Transform [] targets The UnityEngine.Transform [] that are the targets of this tween batch. UnityEngine.Quaternion [] fromArray The UnityEngine.Quaternion [] where the from rotation should be assigned from. UnityEngine.Quaternion [] toArray The UnityEngine.Quaternion [] where the to rotation should be assigned from. System.Int32 startIndex The index where the slice should start from in the parameter arrays. System.Int32 length The length from which values should copied in the parameter arrays starting from the startIndex . System.Single duration The length of time in seconds that the tween batch should take to complete or one pass if looping. ITweenHandle tweenHandle The ITweenHandle instance that will be initialized for this tween. SpaceType spaceType The coordinate system the tween batch should operate in (default is World). EaseType easeType The type of easing the tween batch should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) | Improve this Doc View Source BatchRotateSlice(Transform[], Quaternion[], Quaternion[], Int32, Int32, Single, SpaceType, EaseType, LoopType, Int32, Action, Action) Creates a batch of rotation tweens for a slice from UnityEngine.Transform [] targets starting at startIndex to length . Declaration public void BatchRotateSlice(Transform[] targets, Quaternion[] fromArray, Quaternion[] toArray, int startIndex, int length, float duration, SpaceType spaceType = SpaceType.World, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0, Action onStart = null, Action onComplete = null) Parameters Type Name Description UnityEngine.Transform [] targets The UnityEngine.Transform [] that are the targets of this tween batch. UnityEngine.Quaternion [] fromArray The UnityEngine.Quaternion [] where the from rotation should be assigned from. UnityEngine.Quaternion [] toArray The UnityEngine.Quaternion [] where the to rotation should be assigned from. System.Int32 startIndex The index where the slice should start from in the parameter arrays. System.Int32 length The length from which values should copied in the parameter arrays starting from the startIndex . System.Single duration The length of time in seconds that the tween batch should take to complete or one pass if looping. SpaceType spaceType The coordinate system the tween batch should operate in (default is World). EaseType easeType The type of easing the tween batch should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) System.Action onStart The System.Action that should be invoked when the tween batch begins playing (default is NULL). System.Action onComplete The System.Action that should be invoked when the tween batch completes (default is NULL). | Improve this Doc View Source BatchScale(Transform[], Vector3[], Vector3[], Single, out ITweenHandle, SpaceType, EaseType, LoopType, Int32) Creates a batch of scale tweens for the UnityEngine.Transform [] targets . Declaration public void BatchScale(Transform[] targets, Vector3[] fromArray, Vector3[] toArray, float duration, out ITweenHandle tweenHandle, SpaceType spaceType = SpaceType.World, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0) Parameters Type Name Description UnityEngine.Transform [] targets The UnityEngine.Transform [] that are the targets of this tween batch. UnityEngine.Vector3 [] fromArray The UnityEngine.Vector3 [] where the from scale should be assigned from. UnityEngine.Vector3 [] toArray The UnityEngine.Vector3 [] where the to scale should be assigned from. System.Single duration The length of time in seconds that the tween batch should take to complete or one pass if looping. ITweenHandle tweenHandle The ITweenHandle instance that will be initialized for this tween. SpaceType spaceType The coordinate system the tween batch should operate in (default is World). EaseType easeType The type of easing the tween batch should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) | Improve this Doc View Source BatchScale(Transform[], Vector3[], Vector3[], Single, SpaceType, EaseType, LoopType, Int32, Action, Action) Creates a batch of scale tweens for the UnityEngine.Transform [] targets . Declaration public void BatchScale(Transform[] targets, Vector3[] fromArray, Vector3[] toArray, float duration, SpaceType spaceType = SpaceType.World, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0, Action onStart = null, Action onComplete = null) Parameters Type Name Description UnityEngine.Transform [] targets The UnityEngine.Transform [] that are the targets of this tween batch. UnityEngine.Vector3 [] fromArray The UnityEngine.Vector3 [] where the from scale should be assigned from. UnityEngine.Vector3 [] toArray The UnityEngine.Vector3 [] where the to scale should be assigned from. System.Single duration The length of time in seconds that the tween batch should take to complete or one pass if looping. SpaceType spaceType The coordinate system the tween batch should operate in (default is World). EaseType easeType The type of easing the tween batch should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) System.Action onStart The System.Action that should be invoked when the tween batch begins playing (default is NULL). System.Action onComplete The System.Action that should be invoked when the tween batch completes (default is NULL). | Improve this Doc View Source BatchScaleSlice(Transform[], Vector3[], Vector3[], Int32, Int32, Single, out ITweenHandle, SpaceType, EaseType, LoopType, Int32) Creates a batch of scale tweens for a slice from UnityEngine.Transform [] targets starting at startIndex to length . Declaration public void BatchScaleSlice(Transform[] targets, Vector3[] fromArray, Vector3[] toArray, int startIndex, int length, float duration, out ITweenHandle tweenHandle, SpaceType spaceType = SpaceType.World, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0) Parameters Type Name Description UnityEngine.Transform [] targets The UnityEngine.Transform [] that are the targets of this tween batch. UnityEngine.Vector3 [] fromArray The UnityEngine.Vector3 [] where the from scale should be assigned from. UnityEngine.Vector3 [] toArray The UnityEngine.Vector3 [] where the to scale should be assigned from. System.Int32 startIndex The index where the slice should start from in the parameter arrays. System.Int32 length The length from which values should copied in the parameter arrays starting from the startIndex . System.Single duration The length of time in seconds that the tween batch should take to complete or one pass if looping. ITweenHandle tweenHandle The ITweenHandle instance that will be initialized for this tween. SpaceType spaceType The coordinate system the tween batch should operate in (default is World). EaseType easeType The type of easing the tween batch should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) | Improve this Doc View Source BatchScaleSlice(Transform[], Vector3[], Vector3[], Int32, Int32, Single, SpaceType, EaseType, LoopType, Int32, Action, Action) Creates a batch of scale tweens for a slice from UnityEngine.Transform [] targets starting at startIndex to length . Declaration public void BatchScaleSlice(Transform[] targets, Vector3[] fromArray, Vector3[] toArray, int startIndex, int length, float duration, SpaceType spaceType = SpaceType.World, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0, Action onStart = null, Action onComplete = null) Parameters Type Name Description UnityEngine.Transform [] targets The UnityEngine.Transform [] that are the targets of this tween batch. UnityEngine.Vector3 [] fromArray The UnityEngine.Vector3 [] where the from scale should be assigned from. UnityEngine.Vector3 [] toArray The UnityEngine.Vector3 [] where the to scale should be assigned from. System.Int32 startIndex The index where the slice should start from in the parameter arrays. System.Int32 length The length from which values should copied in the parameter arrays starting from the startIndex . System.Single duration The length of time in seconds that the tween batch should take to complete or one pass if looping. SpaceType spaceType The coordinate system the tween batch should operate in (default is World). EaseType easeType The type of easing the tween batch should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) System.Action onStart The System.Action that should be invoked when the tween batch begins playing (default is NULL). System.Action onComplete The System.Action that should be invoked when the tween batch completes (default is NULL). | Improve this Doc View Source BatchUpdateTransforms(Transform[], Vector3[], Vector3[], Quaternion[], Quaternion[], Vector3[], Vector3[], Single, out ITweenHandle, SpaceType, EaseType, LoopType, Int32) Creates a batch of tweens animating movement, rotation, and scaling for the UnityEngine.Transform [] targets . Declaration public void BatchUpdateTransforms(Transform[] targets, Vector3[] fromPosArray, Vector3[] toPosArray, Quaternion[] fromRotArray, Quaternion[] toRotArray, Vector3[] fromScaleArray, Vector3[] toScaleArray, float duration, out ITweenHandle tweenHandle, SpaceType spaceType = SpaceType.World, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0) Parameters Type Name Description UnityEngine.Transform [] targets The UnityEngine.Transform [] that are the targets of this tween batch. UnityEngine.Vector3 [] fromPosArray The UnityEngine.Vector3 [] where the from position should be assigned from. UnityEngine.Vector3 [] toPosArray The UnityEngine.Vector3 [] where the from position should be assigned from. UnityEngine.Quaternion [] fromRotArray The UnityEngine.Quaternion [] where the from rotation should be assigned from. UnityEngine.Quaternion [] toRotArray The UnityEngine.Quaternion [] where the to rotation should be assigned from. UnityEngine.Vector3 [] fromScaleArray The UnityEngine.Vector3 [] where the from scale should be assigned from. UnityEngine.Vector3 [] toScaleArray The UnityEngine.Vector3 [] where the to scale should be assigned from. System.Single duration The length of time in seconds that the tween batch should take to complete or one pass if looping. ITweenHandle tweenHandle The ITweenHandle instance that will be initialized for this tween. SpaceType spaceType The coordinate system the tween batch should operate in (default is World). EaseType easeType The type of easing the tween batch should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) | Improve this Doc View Source BatchUpdateTransforms(Transform[], Vector3[], Vector3[], Quaternion[], Quaternion[], Vector3[], Vector3[], Single, SpaceType, EaseType, LoopType, Int32, Action, Action) Creates a batch of tweens animating movement, rotation, and scaling for the UnityEngine.Transform [] targets . Declaration public void BatchUpdateTransforms(Transform[] targets, Vector3[] fromPosArray, Vector3[] toPosArray, Quaternion[] fromRotArray, Quaternion[] toRotArray, Vector3[] fromScaleArray, Vector3[] toScaleArray, float duration, SpaceType spaceType = SpaceType.World, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0, Action onStart = null, Action onComplete = null) Parameters Type Name Description UnityEngine.Transform [] targets The UnityEngine.Transform [] that are the targets of this tween batch. UnityEngine.Vector3 [] fromPosArray The UnityEngine.Vector3 [] where the from position should be assigned from. UnityEngine.Vector3 [] toPosArray The UnityEngine.Vector3 [] where the from position should be assigned from. UnityEngine.Quaternion [] fromRotArray The UnityEngine.Quaternion [] where the from rotation should be assigned from. UnityEngine.Quaternion [] toRotArray The UnityEngine.Quaternion [] where the to rotation should be assigned from. UnityEngine.Vector3 [] fromScaleArray The UnityEngine.Vector3 [] where the from scale should be assigned from. UnityEngine.Vector3 [] toScaleArray The UnityEngine.Vector3 [] where the to scale should be assigned from. System.Single duration The length of time in seconds that the tween batch should take to complete or one pass if looping. SpaceType spaceType The coordinate system the tween batch should operate in (default is World). EaseType easeType The type of easing the tween batch should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) System.Action onStart The System.Action that should be invoked when the tween batch begins playing (default is NULL). System.Action onComplete The System.Action that should be invoked when the tween batch completes (default is NULL). | Improve this Doc View Source BatchUpdateTransformsSlice(Transform[], Vector3[], Vector3[], Quaternion[], Quaternion[], Vector3[], Vector3[], Int32, Int32, Single, out ITweenHandle, SpaceType, EaseType, LoopType, Int32) Creates a batch of tweens animating movement, rotation, and scaling for a slice from UnityEngine.Transform [] targets starting at startIndex to length . Declaration public void BatchUpdateTransformsSlice(Transform[] targets, Vector3[] fromPosArray, Vector3[] toPosArray, Quaternion[] fromRotArray, Quaternion[] toRotArray, Vector3[] fromScaleArray, Vector3[] toScaleArray, int startIndex, int length, float duration, out ITweenHandle tweenHandle, SpaceType spaceType = SpaceType.World, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0) Parameters Type Name Description UnityEngine.Transform [] targets The UnityEngine.Transform [] that are the targets of this tween batch. UnityEngine.Vector3 [] fromPosArray The UnityEngine.Vector3 [] where the from position should be assigned from. UnityEngine.Vector3 [] toPosArray The UnityEngine.Vector3 [] where the from position should be assigned from. UnityEngine.Quaternion [] fromRotArray The UnityEngine.Quaternion [] where the from rotation should be assigned from. UnityEngine.Quaternion [] toRotArray The UnityEngine.Quaternion [] where the to rotation should be assigned from. UnityEngine.Vector3 [] fromScaleArray The UnityEngine.Vector3 [] where the from scale should be assigned from. UnityEngine.Vector3 [] toScaleArray The UnityEngine.Vector3 [] where the to scale should be assigned from. System.Int32 startIndex The index where the slice should start from in the parameter arrays. System.Int32 length The length from which values should copied in the parameter arrays starting from the startIndex . System.Single duration The length of time in seconds that the tween batch should take to complete or one pass if looping. ITweenHandle tweenHandle The ITweenHandle instance that will be initialized for this tween. SpaceType spaceType The coordinate system the tween batch should operate in (default is World). EaseType easeType The type of easing the tween batch should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) | Improve this Doc View Source BatchUpdateTransformsSlice(Transform[], Vector3[], Vector3[], Quaternion[], Quaternion[], Vector3[], Vector3[], Int32, Int32, Single, SpaceType, EaseType, LoopType, Int32, Action, Action) Creates a batch of tweens animating movement, rotation, and scaling for a slice from UnityEngine.Transform [] targets starting at startIndex to length . Declaration public void BatchUpdateTransformsSlice(Transform[] targets, Vector3[] fromPosArray, Vector3[] toPosArray, Quaternion[] fromRotArray, Quaternion[] toRotArray, Vector3[] fromScaleArray, Vector3[] toScaleArray, int startIndex, int length, float duration, SpaceType spaceType = SpaceType.World, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0, Action onStart = null, Action onComplete = null) Parameters Type Name Description UnityEngine.Transform [] targets The UnityEngine.Transform [] that are the targets of this tween batch. UnityEngine.Vector3 [] fromPosArray The UnityEngine.Vector3 [] where the from position should be assigned from. UnityEngine.Vector3 [] toPosArray The UnityEngine.Vector3 [] where the from position should be assigned from. UnityEngine.Quaternion [] fromRotArray The UnityEngine.Quaternion [] where the from rotation should be assigned from. UnityEngine.Quaternion [] toRotArray The UnityEngine.Quaternion [] where the to rotation should be assigned from. UnityEngine.Vector3 [] fromScaleArray The UnityEngine.Vector3 [] where the from scale should be assigned from. UnityEngine.Vector3 [] toScaleArray The UnityEngine.Vector3 [] where the to scale should be assigned from. System.Int32 startIndex The index where the slice should start from in the parameter arrays. System.Int32 length The length from which values should copied in the parameter arrays starting from the startIndex . System.Single duration The length of time in seconds that the tween batch should take to complete or one pass if looping. SpaceType spaceType The coordinate system the tween batch should operate in (default is World). EaseType easeType The type of easing the tween batch should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) System.Action onStart The System.Action that should be invoked when the tween batch begins playing (default is NULL). System.Action onComplete The System.Action that should be invoked when the tween batch completes (default is NULL). | Improve this Doc View Source Move(Transform, Vector3, Vector3, Single, out ITweenHandle, SpaceType, EaseType, LoopType, Int32) Moves the UnityEngine.Transform target . Declaration public void Move(Transform target, Vector3 from, Vector3 to, float duration, out ITweenHandle tweenHandle, SpaceType spaceType = SpaceType.World, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0) Parameters Type Name Description UnityEngine.Transform target The UnityEngine.Transform that is the target of this tween. UnityEngine.Vector3 from The position the UnityEngine.Transform will be moved from. UnityEngine.Vector3 to The position the UnityEngine.Transform will be moved to. System.Single duration The length of time in seconds that the tween should take to complete or one pass if looping. ITweenHandle tweenHandle The ITweenHandle instance that will be initialized for this tween. SpaceType spaceType The coordinate system the tween should operate in (default is World). EaseType easeType The type of easing the tween should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) | Improve this Doc View Source Move(Transform, Vector3, Vector3, Single, SpaceType, EaseType, LoopType, Int32, Action, Action) Moves the UnityEngine.Transform target . Declaration public void Move(Transform target, Vector3 from, Vector3 to, float duration, SpaceType spaceType = SpaceType.World, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0, Action onStart = null, Action onComplete = null) Parameters Type Name Description UnityEngine.Transform target The UnityEngine.Transform that is the target of this tween. UnityEngine.Vector3 from The position the UnityEngine.Transform will be moved from. UnityEngine.Vector3 to The position the UnityEngine.Transform will be moved to. System.Single duration The length of time in seconds that the tween should take to complete or one pass if looping. SpaceType spaceType The coordinate system the tween should operate in (default is World). EaseType easeType The type of easing the tween should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) System.Action onStart The System.Action that should be invoked when the tween begins playing (default is NULL). System.Action onComplete The System.Action that should be invoked when the tween completes (default is NULL). | Improve this Doc View Source NewSequence() Creates a new instance of ITweenSequence or returns a pooled instance. Declaration public ITweenSequence NewSequence() Returns Type Description ITweenSequence | Improve this Doc View Source NewSet() Creates a new instance of ITweenSet or returns a pooled instance. Declaration public ITweenSet NewSet() Returns Type Description ITweenSet | Improve this Doc View Source RecycleSequence(ITweenSequence) Clears the contents of the ITweenSequence tweenSequence and returns it to the pool. Declaration public void RecycleSequence(ITweenSequence tweenSequence) Parameters Type Name Description ITweenSequence tweenSequence The ITweenSequence instance to be recycled; any local reference to this should be cleared after it has been recycled. | Improve this Doc View Source RecycleSet(ITweenSet) Clears the contents of the ITweenSet tweenSet and returns it to the pool. Declaration public void RecycleSet(ITweenSet tweenSet) Parameters Type Name Description ITweenSet tweenSet The ITweenSet instance to be recycled; any local reference to this should be cleared after it has been recycled. | Improve this Doc View Source Rotate(Transform, Quaternion, Quaternion, Single, out ITweenHandle, SpaceType, EaseType, LoopType, Int32) Rotates the UnityEngine.Transform target . Declaration public void Rotate(Transform target, Quaternion from, Quaternion to, float duration, out ITweenHandle tweenHandle, SpaceType spaceType = SpaceType.World, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0) Parameters Type Name Description UnityEngine.Transform target The UnityEngine.Transform that is the target of this tween. UnityEngine.Quaternion from The rotation the UnityEngine.Transform will be animated from. UnityEngine.Quaternion to The rotation the UnityEngine.Transform will be animated to. System.Single duration The length of time in seconds that the tween should take to complete or one pass if looping. ITweenHandle tweenHandle The ITweenHandle instance that will be initialized for this tween. SpaceType spaceType The coordinate system the tween should operate in (default is World). EaseType easeType The type of easing the tween should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) | Improve this Doc View Source Rotate(Transform, Quaternion, Quaternion, Single, SpaceType, EaseType, LoopType, Int32, Action, Action) Rotates the UnityEngine.Transform target . Declaration public void Rotate(Transform target, Quaternion from, Quaternion to, float duration, SpaceType spaceType = SpaceType.World, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0, Action onStart = null, Action onComplete = null) Parameters Type Name Description UnityEngine.Transform target The UnityEngine.Transform that is the target of this tween. UnityEngine.Quaternion from The rotation the UnityEngine.Transform will be animated from. UnityEngine.Quaternion to The rotation the UnityEngine.Transform will be animated to. System.Single duration The length of time in seconds that the tween should take to complete or one pass if looping. SpaceType spaceType The coordinate system the tween should operate in (default is World). EaseType easeType The type of easing the tween should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) System.Action onStart The System.Action that should be invoked when the tween begins playing (default is NULL). System.Action onComplete The System.Action that should be invoked when the tween completes (default is NULL). | Improve this Doc View Source RotateOnAxis(Transform, Single, Single, RotateMode, out ITweenHandle, SpaceType, EaseType, LoopType, Int32) Rotates the UnityEngine.Transform target around the the specified axis (RotateMode.XYZ is an invalid value and will cause an assertion). Declaration public void RotateOnAxis(Transform target, float angle, float duration, RotateMode rotateMode, out ITweenHandle tweenHandle, SpaceType spaceType = SpaceType.World, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0) Parameters Type Name Description UnityEngine.Transform target The UnityEngine.Transform that is the target of this tween. System.Single angle System.Single duration The length of time in seconds that the tween should take to complete or one pass if looping. RotateMode rotateMode ITweenHandle tweenHandle The ITweenHandle instance that will be initialized for this tween. SpaceType spaceType The coordinate system the tween should operate in (default is World). EaseType easeType The type of easing the tween should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) | Improve this Doc View Source RotateOnAxis(Transform, Single, Single, RotateMode, SpaceType, EaseType, LoopType, Int32, Action, Action) Rotates the UnityEngine.Transform target around the the specified axis (RotateMode.XYZ is an invalid value and will cause an assertion). Declaration public void RotateOnAxis(Transform target, float angle, float duration, RotateMode rotateMode, SpaceType spaceType = SpaceType.World, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0, Action onStart = null, Action onComplete = null) Parameters Type Name Description UnityEngine.Transform target The UnityEngine.Transform that is the target of this tween. System.Single angle System.Single duration The length of time in seconds that the tween should take to complete or one pass if looping. RotateMode rotateMode SpaceType spaceType The coordinate system the tween should operate in (default is World). EaseType easeType The type of easing the tween should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) System.Action onStart The System.Action that should be invoked when the tween begins playing (default is NULL). System.Action onComplete The System.Action that should be invoked when the tween completes (default is NULL). | Improve this Doc View Source Scale(Transform, Vector3, Vector3, Single, EaseType, LoopType, Int32, Action, Action) Scales the UnityEngine.Transform target . Declaration public void Scale(Transform target, Vector3 from, Vector3 to, float duration, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0, Action onStart = null, Action onComplete = null) Parameters Type Name Description UnityEngine.Transform target The UnityEngine.Transform that is the target of this tween. UnityEngine.Vector3 from The scale the UnityEngine.Transform will be animated from. UnityEngine.Vector3 to The scale the UnityEngine.Transform will be animated to. System.Single duration The length of time in seconds that the tween should take to complete or one pass if looping. EaseType easeType The type of easing the tween should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero) System.Action onStart The System.Action that should be invoked when the tween begins playing (default is NULL). System.Action onComplete The System.Action that should be invoked when the tween completes (default is NULL). | Improve this Doc View Source Scale(Transform, Vector3, Vector3, Single, out ITweenHandle, EaseType, LoopType, Int32) Scales the UnityEngine.Transform target . Declaration public void Scale(Transform target, Vector3 from, Vector3 to, float duration, out ITweenHandle tweenHandle, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0) Parameters Type Name Description UnityEngine.Transform target The UnityEngine.Transform that is the target of this tween. UnityEngine.Vector3 from The scale the UnityEngine.Transform will be animated from. UnityEngine.Vector3 to The scale the UnityEngine.Transform will be animated to. System.Single duration The length of time in seconds that the tween should take to complete or one pass if looping. ITweenHandle tweenHandle The ITweenHandle instance that will be initialized for this tween. EaseType easeType The type of easing the tween should use while playing (default is Linear). LoopType loopType The type of looping that should be used (default is None). System.Int32 loopCount If looping, the number of loops that should occur before completing. If set to -1, the tween will loop infinitely. (default is zero)"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Add your introductions here! | JTween",
    "keywords": "Add your introductions here!"
  },
  "getting_started.html": {
    "href": "getting_started.html",
    "title": "Overview | JTween",
    "keywords": "Overview Getting started with JTween is a fairly straightforward process. It involves importing the plugin, adding any AssemblyDefnition references as needed, and importing its namespace into any script that you want to use the JTween API. Step 1 - Importing JTween Using this library in your project can be done in two ways: Releases: The latest release can be found here as a UnityPackage file that can be downloaded and imported directly into your project's Assets folder. Package: Using the native Unity Package Manager, you can add this library as a package by modifying your manifest.json file found at /ProjectName/Packages/manifest.json to include it as a dependency. See the example below on how to reference it. { \"dependencies\": { ... \"com.jeffcampbellmakesgames.jtween\" : \"https://github.com/jeffcampbellmakesgames/unity-jtween.git#release/stable\", ... } } Step 2 - Add Reference to AssemblyDefinition (optional) Once imported, a new AssemblyDefinition JCMG.JTween will become available that contains the runtime JTween code. If the scripts that you need to be able to interact with JTween, they will need to add JCMG.JTween as a dependency. Otherwise if they are not this step can be skipped. Step 3 - Add JCMG.JTween Namespace to Scripts In the scripts where you want to use JTWeen, make sure to import its namespace. All user-facing code is available in the JCMG.JTween namespace. using JCMG.JTween;"
  },
  "index.html": {
    "href": "index.html",
    "title": "About | JTween",
    "keywords": "About JTween is a data-driven, job-based tweening library. It places a focus on performance by attempting to shift the processing of tween data and applying that data to tween targets on Job worker threads. This currently applies to Transforms only, but as the Entity-Component System of the Unity DOTS stack reaches maturity this approach can likely be applied to other components and non-Job updateable components will be added regardless. Getting Started For jumping in and using JTween, see here on how to get started. Usage To learn more about how to use JTween's API, see here for more information. There are also examples demonstrating its usage included in the repository's Unity project. Contribute If you are interested in contributing, found a bug, or want to request a new feature, please see here for more information. Support If this is useful to you and/or you’d like to see future development and more tools in the future, please consider supporting it either by contributing to the Github projects (submitting bug reports or features,pull requests) or by buying me coffee using any of the links below. Every little bit helps! Credits Those who have contributed in some way to the development and maintenance of this library can be found listed here . License Please see here for more information."
  },
  "credits.html": {
    "href": "credits.html",
    "title": "| JTween",
    "keywords": "These are users who have contributed in some way to this project, whether that is code, art, design, reporting bugs, or other. The content/format of this will be replaced in the near future using the @all-contributors bot."
  },
  "usage.html": {
    "href": "usage.html",
    "title": "Overview | JTween",
    "keywords": "Overview Using JTween should be a straightforward experience if you've ever used similar tween libraries for Unity, despite the complex underlying implementation. The biggest difference which I'll cover in more detail below is that this library de-emphasizes returning any kind of OOP access to the tween itself; for the most part when tweens are created they automaticaly begin playing and will clean themselves up automatically once completed. It is stil possible however to get a reference object to the tween itself in the form of an ITweenHandle which allows for more standard user-control over the tween itself; this comes with the responsibility over its lifecycle and requires user action when the tween is no longer needed. Adding JTweenControl JTweenControl is a global tween manager component which ultimately all tween calls are routed through and managed by. This can be added to an existing scene at edit time by: Using the the Add Component menu to add it to an existing GameObject . Using the menu item Tools->JTween->Add JTweenControl to Scene . This will add the component to the scene on a new GameObject named JTweenControl if it does not already exist. If at runtime JTweenControl does not exist, it will be created the first time any type of tween is created. Creating Tweens Creating tweens can be done by either using the provided extension methods which offer a variety of specific ways of animating transforms or by making calls directly to JTweenControl.Instance which offers all of the tweening methods that are available with all parameters. The example below covers the same tween data, but shows how they vary when created through extension methods or JTweenControl directly. Extension method example The extension methods for tweens generally focus on a specific type of tween transformation to simplify the API and require less mandatory parameters. // This movement tween will move this transform in local space relative to its parent to the target over 2 seconds // with a BounceOut ease type and will loop 5 times from the beginning. transform.MoveLocal(new Vector3(10, 0, 0), 2, EaseType.BounceOut, LoopType.Restart, 5); JTweenControl example The methods for tweening on JTweenControl provide all the possible parameters for a tween transformation. Default values are provided to help simplify calling these methods, but for specific type of transformations (Local vs World) certain parameters like SpaceType must be provided to set the correct transformation behavior. // This movement tween will move this transform in local space relative to its parent to the target over 2 seconds // with a BounceOut ease type and will loop 5 times from the beginning. JTweenControl.Instance.Move( transform, transform.localPosition, transform.localPosition + new Vector3(10,0,0), 2, SpaceType.Local, EaseType.BounceOut, LoopType.Restart, 5); ITweenHandle and Events By design, most tweens are played automatically once created and cleaned up once completed. This emphasizes a strategy of creating tweens only when needed, avoiding allocating instances of handles to tweens when none may be needed, and avoids requiring by default that users have to manage the lifecycle of a tween. These type of methods will offer System.Action callback parameters for when a tween starts and completes to be able to chain relevant functionality to tweens. However, there are many circumstances where user control over tweens is important, particularly where a user may want to pause, resume, or stop a running tween. This is possible by using the tween method overloads that offer an out ITweenHandle parameter. These methods will create tweens that do not play or clean themselves up automatically and require more hands-on managemenent from a user over its lifecycle. Once created, these tweens will remain in the JTween managed data until explicitly recycled. Once a user has recycled an ITweenHandle , they should clear any local references to it as it will be reused the next time a user attempts to get another one. The types of actions a user can execute on an ITweenHandle include: Add zero or more listeners for when the tween starts. Add zero or more listeners for when the tween completes. Playing the tween (if this is the first time a user has played the tween, this will invoke any listeners for the started event) Pausing the tween. Restarting the tween (Rewinds its tween data back to the original values and automatically plays it). Rewinding the tween (Rewinds its tween data back to the original values and automatically pauses it. If a tween was already playing, it will be paused and its current state will not be updated until played). Stopping the tween (Stops the tween instance and marks it as completed which will invoke any listeners for the completed event). Recycle the tween (Once a user has recycled an ITweenHandle , any reference to that instance should be cleared). In addition, the user can actively query for the current state of the tween using the ITweenHandle methods: IsPlaying() IsPaused() IsCompleted() Non-ITweenHandle API Example API public static void Move( this Transform transform, Vector3 to, float duration, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0, Action onStart = null, Action onComplete = null) { ... } Example // This tween will play automatically and once completed playing will clean itself up without user // management. transform.MoveLocal(new Vector3(10, 0, 0), 2, EaseType.BounceOut, LoopType.Restart, 5, OnTweenStart, OnTweenComplete; ITweenHandle API Example API public void Move( Transform target, Vector3 from, Vector3 to, float duration, out ITweenHandle tweenHandle, SpaceType spaceType = SpaceType.World, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0) { ... } Example ITweenHandle tweenHandle; transform.MoveLocal(new Vector3(10, 0, 0), 2, out tweenHandle, EaseType.BounceOut, LoopType.Restart, 5); Single and Batch Tween APIs Many API methods exist both as extension methods and on JTweenControl for tweening individual transforms. However, where there are many tweens that stop at the same time there is a performance hit for cleaning them up. If starting many tweens on a single frame that have the same duration it may be advantageous to take advantage of the batch APIs on JTweenControl . These allow for the creation of many tweens at once whose data is stored in a linear fashion and when completed can be cleaned up much more efficiently. There are some differences to take into account when using these methods, particularly around events and ITweenHandle s if used. Single Tween APIs Started and Completed events fire for this tween instance only (1:1 for events per tween) An ITweenHandle affects only this tween instance. Accepts a single transform parameter as well as single parameters for movement, rotation, and scaling. Batch Tween APIs Started and Completed events fire for when the batch of tween instances start and stop/complete (1:X for events to X number of tweens in the batch) An ITweenHandle reference affects the entire batch of tweens and has the same behavior as it does for a single tween. The batch will start as being paused until played, when paused it will pause every tween in the batch, etc...The batch of data will remain in JTween's managed collections until recycled by a user. Accepts an array of transforms as well as arrays for any of the relevant data for movement, rotation, and scaling. Usage is predicated on the arrays having equal length or for sliced versions that the slice is contained within the array's contents; if this is not the case, an assertion will occur. Batch methods are available for using an entire array of transforms or only a slice of the array (a linear block of an existing array identified by a start index and length of the array's data from that index that should be used). Batch API Example Without Slice public void BatchMove( Transform[] targets, Vector3[] fromArray, Vector3[] toArray, float duration, out ITweenHandle tweenHandle, SpaceType spaceType = SpaceType.World, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0) { ... } Batch API Example With Slice public void BatchMoveSlice( Transform[] targets, Vector3[] fromArray, Vector3[] toArray, int startIndex, int length, float duration, SpaceType spaceType = SpaceType.World, EaseType easeType = EaseType.Linear, LoopType loopType = LoopType.None, int loopCount = 0, Action onStart = null, Action onComplete = null) { ... } Tween Collections More complex chaining or grouping of tweens can be tedious if attempting to do this manually by using either single or batched listeners for Started, Completed events. For this purpose I have created two tween set collections, ITweenSet and ITweenSequence which help to make this easier by providing a similiar API to ITweenHandle , but allows for managing multiple ITweenHandle instances at once. Since an ITweenHandle could represent either a single tween or batch of tweens, these collections do not distinguish between them and can handle them both equally well. NOTE: For tweens that have been set to infinitely loop, these may cause certain undesired behavior such as certain callbacks not being able to occur or blocking progress in the sequence in the case of ITweenSequence . Please make sure if you do add inifnitely looping tweens that you are tracking and managing their their ITweenHandles to avoid these scenarios. ITweenSet ITweenSet is an tween collection that allows a user to add X number of ITweenHandle instances and be able to seamlessly execute play, pause, stop, rewind, restart, or recycle actions on all of them at once. In addition, it offers the ability to add listeners for when the ITweenHandles are first played and when all of them have completed. Creating a new ITweenSet is as simple as calling JTweenControl.Instance.NewSet() . ITweenSequence ITweenSequence is a tween collection that allows a user to add X number of ITweenHandle instances that can be played in sequence. Once the ITweenSequence is played, is started event will fire and each ITweenHandle will play in the order that they were added. Once all ITweenHandles have been played, the completed event will fire. There are a couple of distinctions from ITweenSet to take note of: Pausing an ITweenSequence will pause the currently playing ITweenHandle in the sequence if any. Restarting an ITweenSequence will rewind all ITweenHandle instances in the sequence and immediately play the first one. Creating a new ITweenSequence is as simple as calling JTweenControl.Instance.NewSequence() ."
  },
  "contributing.html": {
    "href": "contributing.html",
    "title": "Project structure | JTween",
    "keywords": "Thanks for considering contributing to JTween! Read the guidelines below before you submit an issue or create a PR. Project structure The project structure is split between several branches master: This is the stable branch and all releases/packages are generated from this. develop: This is the primary development branch which all PRs should be made to and is generally considered less-stable. This is occasionally merged into master and a new release tag/package is generated from this. releases/stable: This branch is orphaned and contains only the package contents for JTween. This is updated in sync with tagged releases on master and each commit that changes these contents should result in the version in package.json being changed. This structure allows for ease of development and quick testing via master or develop , but clear isolation and separation between the package distribution via releases/stable . Pull requests Pull requests should be made to the develop branch . The types of pull requests that are highly desirable are generally: Bug fixes Feature improvements addressing issues discussed on the GitHub repository. This allows for wider discussion of those issues prior to any implementation and has the potential to help filter features or changes that are undesirable before time is spent working on them. Performance Issues and Pull Requests For any issues or pull requests regarding performance improvements, at minimum please include details and screenshots describing the issue in as much detail as possible and if relevant showing a before and after profile. Better yet, if you can provide a reproducible example that can be used to demonstrate the issue it will be much more likely that the issue is addressed quickly. Style Guide Language Usage Mark closed types as sealed to enable proper devirtualization (see here for more info). Avoid LINQ usage for runtime usage except where absolutely possible ( ToList or ToArray for example) and avoid using ForEach . Using these methods creates easily avoidable garbage (in newer versions of Unity >= 5.6 this is situational to the Collection or if its being used via an interface, but easy to avoid edge cases by not using at all). Editor usage is another story as performance is not as generally important and non-usage of these can be relaxed. Layout There is an .editorconfig at the root of the repository that can be used by most IDEs to help ensure these settings are automatically applied. Indentation: 1 tab = 4 spaces (tab character) Desired width: 120-130 characters max per line Line Endings: Unix (LF), with a new-line at the end of each file. White Space: Trim empty whitespace from the ends of lines. Naming and Formatting Object Name Notation Example Namespaces PascalCase JCMG.JTween.Editor Classes PascalCase SemVersion Methods PascalCase ParseVersion Method arguments camelCase oldValue Properties PascalCase Value Public fields camelCase value Private fields _camelCase _value Constants All Upper Caps with Snake case DEFAULT_VERSION Inline variables camelCase value Structure Follow good encapsulation principles and try to limit exposing fields directly as public; unless necessary everything should be marked as private/protected unless necessary. Where public access to a field is needed, use a public property instead. Always order access from most-accessible to least (i.e, public to private ). Where classes or methods are not intended for use by a user, mark these as internal . Order class structure like so: Namespace Internal classes Properties Fields Events Unity Methods Primary Methods Helper Methods Lines of code that are generally longer than 120-130 characters should generally be broken out into multiple lines. For example, instead of: public bool SomeMethodWithManyParams(int param1, float param2, List<int> param3, out int param4, out int param5)... do public bool SomeMethodWithManyParams( int param1, float param2, List<int> param3, out int param4, out int param5)... Example Formatting using System; using UnityEngine; namespace Example { public class Foo : MonoBehavior { public int SomeValue { get { return _someValue; } } [SerializeField] private int _someValue; private const string WARNING = \"Somethings wrong!\"; private void Update() { // Do work Debug.Log(Warning); } } }"
  },
  "license.html": {
    "href": "license.html",
    "title": "Non-legalese summary | JTween",
    "keywords": "Copyright (c) 2019 Jeff Campbell Non-legalese summary You can freely use JTween in both commercial and non-commercial projects. You can modify the code only for your own use and you cannot redistribute modified versions. JTween was/is hard work: please respect the copyright. Definitions Copyright Holder Jeff Campbell You/Your Means any person who would like to copy, distribute, or modify the Package. Package Means the collection of files distributed by the Copyright Holder, and derivatives of that collection and/or of those files. A given Package may consist of either the Standard Version, or a Modified Version. Distribute Means providing a copy of the Package or making it accessible to anyone else, or in the case of a company or organization, to others outside of your company or organization. Standard Version Refers to the Package if it has not been modified, or has been modified only in ways explicitly requested by the Copyright Holder. Modified Version Means the Package, if it has been changed, and such changes were not explicitly requested by the Copyright Holder. License You are permitted to use the Standard Version and create and use Modified Versions for any purpose without restriction, provided that you do not Distribute the Modified Version. You may Distribute verbatim copies of the Source form of the Standard Version of this Package in any medium without restriction, either gratis or for a Distributor Fee, provided that you duplicate all of the original copyright notices and associated disclaimers and also include the original readme.txt file. At your discretion, such verbatim copies may or may not include a Compiled form of the Package. Any use, modification, and distribution of the Standard or Modified Versions is governed by this Artistic License. By using, modifying or distributing the Package, you accept this license. Do not use, modify, or distribute the Package, if you do not accept this license. This license does not grant you the right to use any trademark, service mark, tradename, or logo of the Copyright Holder. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "| JTween",
    "keywords": ""
  },
  "release_notes.html": {
    "href": "release_notes.html",
    "title": "1.0.1 | JTween",
    "keywords": "1.0.1 Fixed issue with package dependency versions for preview versions v1.0.0 This release marks the first official version of JTween and supports the following features: Single and Batch Tweens for Transforms supporting animation of Position, Rotation, and Scaling properties. ITweenHandles Started and Stopped Events Tween Collections (ITweenSet and ITweenSequence) For more details on getting started with JTween and using it in your project, please visit the following links: https://jeffcampbellmakesgames.github.io/unity-jtween/getting_started.html https://jeffcampbellmakesgames.github.io/unity-jtween/usage.html"
  }
}